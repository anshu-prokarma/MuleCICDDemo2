# This is a basic workflow to help you get started with Actions

name: Prod

on:
  #push:    
   # tags:        
   #   - 'v*'
  workflow_dispatch:
  

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:

    runs-on: ubuntu-latest
    outputs:
      tagname: ${{ steps.tagname.outputs.tagvalue }}
   
    steps:
    - name: Print
      run: env | sort
    - name: Get latest tag
      id: get-latest-tag
      uses: oprypin/find-latest-tag@v1
      with:
        repository: ${{ github.repository }}
        releases-only: true
    - name: Print Tag name 
      id: tagname
      run: echo "::set-output name=tagvalue::${{steps.get-latest-tag.outputs.tag}}"
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        ref: ${{steps.get-latest-tag.outputs.tag}}
      
    - name: Cache dependencies
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven
        
    - name: Build with Maven
      run: mvn -B clean package --file pom.xml -DskipTests
      
    - name: Stamp artifact file name with commit hash
      run: |
        artifactName1=$(ls target/*.jar | head -1)
        commitHash=$(git rev-parse --short "$GITHUB_SHA")
        artifactName2=$(ls target/*.jar | head -1 | sed "s/.jar/-$commitHash.jar/g")
        mv $artifactName1 $artifactName2
    
    - name: Upload artifact 
      uses: actions/upload-artifact@master
      with:
          name: artifacts
          path: target/*.jar  
  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: Production
    steps:    
    
             
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        ref: ${{needs.build.outputs.tagname}}
        
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    
    - uses: actions/download-artifact@master
      with:
        name: artifacts
    
    - name: Deploy to Sandbox
      env:
        USERNAME: ${{ secrets.USERNAME }}
        PASSWORD: ${{ secrets.PASSWORD }}
      run: |
        artifactName=$(ls *.jar | head -1)
        mvn deploy -DmuleDeploy \
         -Dmule.artifact=$artifactName \
         -Dmule.version=4.4.0 \
         -Dusername="$USERNAME" \
         -Dpassword="$PASSWORD" \
         -Denvironment=Sandbox \
         -Dcloudhub.application.name=democicdanshu22 \
         -DskipTests
